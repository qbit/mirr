#!/usr/bin/env coffee

Optparse = require 'optparse'
MirrFtp = require '../lib/ftp'
Mirr = require '../lib/mirr'
Cron = require 'cron'
Express = require 'express'
App = Express.createServer()

mirr = new Mirr.Mirr( )

App.configure ->
  App.set 'view engine', 'ejs'
  App.use( Express.bodyParser() )
  App.use( Express.static( "#{__dirname}/../public" ))
  App.use( Express.errorHandler( { dumpExceptions: false, showStack: false } ))

Options =
  port: 1337

Jobs = []

Switches = [
  [ "-h", "--help",     "Display help info." ],
  [ "-d", "--debug",     "Show debug information." ],
  [ "-f", "--ftpdebug",     "Show ftp debug information ( very verbose )." ],
  [ "-q", "--queuedebug",     "Show ftp queueing debug information." ],
  [ "-p", "--port PORT",     "Port number to run the web server on. ( default 1337 )" ]
  [ "-n", "--noserver", "Disable webserver entirely. This will require another server." ]
]

Parser = new Optparse.OptionParser( Switches )
Parser.banner = "Usage mirr [options]"

Parser.on 'help', ( opt, val ) ->
  console.log Parser.toString()
  process.exit 0

Parser.on 'port', ( opt, val ) ->
  Options.port = val

Parser.on 'debug', ( opt, val ) ->
  Options.debug = true

Parser.on 'ftpdebug', ( opt, val ) ->
  Options.ftpdebug = true

Parser.on 'queuedebug', ( opt, val ) ->
  Options.queuedebug = true

Parser.parse process.argv or process.ARGV

createJob = ( name, j ) ->
    nj = new Cron.CronJob j.schedule, ( ) ->
        console.log "Updating #{this.jobName}"
        opts = {
          queue_debug: Options.queuedebug
          debug: Options.debug
          ftp_debug: Options.ftpdebug
        }
        ftp = new MirrFtp.MirrFtp( j.server, 'anonymous', 'anonymous', opts )
        for arch in j.arch
          path = "/pub/OpenBSD/#{name}/#{arch}/"

          ftp.getNewFiles path, j.lastupdate, ( list ) ->
              console.log list
              for file in list
                console.log list

    nj.jobName = name
    nj.jobInfo = j
    Jobs.push nj

startJobs = () ->
    mirr.dump ( err, list ) ->
        for m of list
            if m isnt 'cmd'
                console.log "Setting #{m} to #{list[m].schedule}"
                createJob( m, list[m] )

ControlJob = new Cron.CronJob '* * * * * *', ( ) ->
  mirr.dump ( err, list ) ->
    for m of list
      if m is 'cmd' and list[m] is 'reload'
        mirr.log 'Reloading jobs'
        mirr.rmKey( 'cmd' )
        mirr._restart Jobs, () ->
          startJobs()

startJobs()

App.get '/', ( req, res ) ->
  mirr.dump ( err, list ) ->
    mirrors = []
    for m of list
      o =
        release: m
        server: list[m].server
        schedule: list[m].schedule
        arch: list[m].arch
        packages: list[m].packages
        lastupdate: list[m].lastupdate
        active: list[m].active

      mirrors.push o
        
    res.render 'index', { curr_mirr: mirrors, title: 'Mirr' }

App.listen( Options.port )

# vim:ft=coffee ts=2 sw=2 et :
